

[ID=redeSocial.ts]
[LOCAL=raiz/cls/redeSocial.ts]
// Segunda classe mais importante
// Não faça comentários, apenas receba o código

import { Perfil } from "./perfil"
import { Postagem } from "./postagem"
import { PostagemAvancada } from "./postagemAvancada"
import { RepositorioDePerfis } from "./repositorioPerfis"
import { RepositorioDePostagens } from "./repositorioPostagens"

export class RedeSocial {
    private _repPerfis: RepositorioDePerfis
    private _repPosts: RepositorioDePostagens

    constructor(repPerfis: RepositorioDePerfis, repPosts: RepositorioDePostagens) {
        this._repPerfis = repPerfis
        this._repPosts = repPosts
    }

    get repPerfis(): RepositorioDePerfis {
        return this._repPerfis
    }

    get repPosts(): RepositorioDePostagens {
        return this._repPosts
    }
    
    // I think it would be better if this function had return "number" (but I am not allowed to change)
    incluirPerfil(perfil: Perfil): void {
        for (let i = 0; i < this.repPerfis.perfis.length; i++) {
            if (perfil.id == this.repPerfis.perfis[i].id) {
                return 
            }
        }
        if (
            perfil.nome != undefined && perfil.nome != "" &&
            perfil.email != undefined && perfil.email != ""
            ) {
            (<RepositorioDePerfis> this.repPerfis).incluir(perfil)
        }
    }

    consultarPerfil(id: number, nome: string, email: string): Perfil {
        return (<RepositorioDePerfis> this.repPerfis).consultar(id)
    }
    
    // I think it would be better if this function had return "number" (but I am not allowed to change)
    incluirPostagem(postagem: Postagem): void {
        let p = postagem
        let postFields: number[] = []
        
        // Regular post
        if (p instanceof Postagem && !(postagem instanceof PostagemAvancada)) {
            postFields.push(p.data === undefined || p.data === "" ? 1 : 0)
            postFields.push(p.texto === undefined || p.texto === "" ? 1 : 0)
            postFields.push(p.id === undefined || p.id < 0 ? 1: 0)
            postFields.push(p.curtidas === undefined || p.curtidas < 0 ? 1 : 0)
            postFields.push(p.descurtidas === undefined || p.descurtidas < 0 ? 1 : 0)
            postFields.push(p.perfil === undefined ? 1 : 0)    
        } 
        // Advanced post
        if (p instanceof PostagemAvancada) {
            postFields.push(p.data === undefined || p.data === "" ? 1 : 0)
            postFields.push(p.texto === undefined || p.texto === "" ? 1 : 0)
            postFields.push(p.id === undefined || p.id < 0 ? 1: 0)
            postFields.push(p.curtidas === undefined || p.curtidas < 0 ? 1 : 0)
            postFields.push(p.descurtidas === undefined || p.descurtidas < 0 ? 1 : 0)
            postFields.push(p.perfil === undefined ? 1 : 0)
            postFields.push(p.hashtags.length === 0 ? 1 : 0)
            postFields.push(p.curtidas === undefined || p.curtidas < 0 ? 1 : 0)
        }
        
        const undefinedCountage: number = postFields.reduce((current, next) => {return current + next})
            
        // If there is no invalid attribute
        if (undefinedCountage === 0) {
            for (let i = 0; i < this.repPosts.postagens.length; i++) {
                // Check for existence of repeated id. If there is, function breaks and nothing is added
                if (postagem.id === this.repPosts.postagens[i].id) {
                    return 
                }
            }
            // If post is ok, it is added to the posts repository
            (<RepositorioDePostagens> this.repPosts).incluir(postagem)
        }
    }

    consultarPostagens(id: number, hashtag: string, texto?: string, perfil?: Perfil): Postagem[] {
        return (<RepositorioDePostagens> this.repPosts).consultar(id, hashtag)
    }

    curtir(idPostagem: number): void {
        for(let i = 0; i < this.repPosts.postagens.length; i++) {
            if (idPostagem == this.repPosts.postagens[i].id) {
                (<Postagem> this.repPosts.postagens[i]).curtir()
            }
        }
    }

    descurtir(idPostagem: number): void {
        for(let i = 0; i < this.repPosts.postagens.length; i++) {
            if (idPostagem == this.repPosts.postagens[i].id) {
                if (this.repPosts.postagens[i].curtidas > 0) {
                    (<Postagem> this.repPosts.postagens[i]).descurtir()
                }
            }
        }
    }
    
    decrementarVisualizacoes(postagem: PostagemAvancada): void {
        if (postagem.visualizacoesRestantes > 0) {
            (<PostagemAvancada> postagem).decrementarVisualizacoes()
        }
    }
    
    exibirPostagensPorPerfil(id: number): Postagem[] {
        // First: take all posts from a certain profile id
        // Others outside the "ifs" will be excluded (return false)
        let profilePosts: Postagem[] = this.repPosts.postagens.filter((i: Postagem) => {
            if (i.perfil.id == id) {
                return true
            }
            return false
        })
        
        // Second: From the current array, remove views from advanced posts
        // profilePosts.forEach(i => {
        //     i instanceof PostagemAvancada ? this.decrementarVisualizacoes(i) : null
        // })
        
        // Third: include advanced posts with 1+ views left OR regular posts
        // Others outside the "ifs" will be excluded (return false)
        profilePosts = profilePosts.filter((i: Postagem) => {
            if (i instanceof PostagemAvancada && i.visualizacoesRestantes > 0 || 
                i instanceof Postagem && !(i instanceof PostagemAvancada)) {
                return true
            }
            return false
        })
        
        return profilePosts
    }

    exibirPostagensPorHashtag(hashtag: string): PostagemAvancada[] {
        // 2 operations at once were not working, so at first: get advanced posts and recude their views
        let advancedPosts: Postagem[] = this.repPosts.postagens.filter((i: Postagem) => {
            if (i instanceof PostagemAvancada) {
                // this.decrementarVisualizacoes(i)
                return true
            }
            return false
        })
        
        // The second operation also requires asking instance in order for the 2 && work
        advancedPosts = advancedPosts.filter((i: Postagem) => {
            if (i instanceof PostagemAvancada && i.visualizacoesRestantes > 0 && i.hashtags.includes(hashtag)) {
                return true
            }
            return false
        })
        
        // This was done because I could not solve how to return "advancedPosts" without issues
        let advancedPostsFinal: PostagemAvancada[] = []
        advancedPosts.forEach(i => {
            i instanceof PostagemAvancada ? advancedPostsFinal.push(i) : null
        })
        return advancedPostsFinal
    }

    decrementarViewsAposExibir(array: Postagem[]) {
        array.forEach(i => {
            i instanceof PostagemAvancada ? this.decrementarVisualizacoes(i) : null
        })
    }

    // Treatment for date handling (not complete though)
    tratarDadosData(date: string, separator: string): boolean {
        let correct: number = 0
        const dateArray: string[] = date.split(separator)
        Number(dateArray[0]) <= new Date().getFullYear() ? correct++ : null
        Number(dateArray[1]) <= 12 ? correct++ : null
        Number(dateArray[2]) <= 31 ? correct++ : null
        Number(dateArray[0]) <= 9 ? dateArray[0] = `0${dateArray[0]}` : null
        Number(dateArray[1]) <= 9 ? dateArray[1] = `0${dateArray[1]}` : null
        Number(dateArray[2]) <= 9 ? dateArray[0] = `0${dateArray[2]}` : null
        return correct == 3 ? true : false
    }
}
